# Generated by Django 5.2.3 on 2025-06-10 12:42

import django.core.validators
import django.db.models.deletion
import i18nfield.fields
import pretalx.common.models.mixins
import pretalx.submission.models.cfp
import pretalx.submission.models.question
import pretalx.submission.models.resource
import pretalx.submission.models.submission
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("submission", "0002_auto_20170820_1216"),
        ("submission", "0003_auto_20170830_1813"),
        ("submission", "0004_auto_20170902_0535"),
        ("submission", "0005_auto_20170902_0800"),
        ("submission", "0006_auto_20170913_1142"),
        ("submission", "0007_auto_20170924_0503"),
        ("submission", "0008_review"),
        ("submission", "0009_auto_20171004_0819"),
        ("submission", "0010_auto_20171006_1118"),
        ("submission", "0011_submission_invitation_token"),
        ("submission", "0012_question_active"),
        ("submission", "0013_auto_20171104_1040"),
        ("submission", "0014_resource"),
        ("submission", "0015_question_contains_personal_data"),
        ("submission", "0016_auto_20171114_1251"),
        ("submission", "0017_auto_20180115_1743"),
        ("submission", "0018_remove_submissiontype_max_duration"),
        ("submission", "0019_submissiontype_deadline"),
        ("submission", "0020_submission_image"),
        ("submission", "0021_answer_review"),
        ("submission", "0022_submission_review_code"),
        ("submission", "0023_submission_is_featured"),
        ("submission", "0024_auto_20180619_1519"),
        ("submission", "0025_auto_20180619_1522"),
        ("submission", "0026_auto_20180811_1827"),
        ("submission", "0027_auto_20180812_1647"),
        ("submission", "0028_auto_20180922_0511"),
        ("submission", "0029_auto_20181009_0353"),
        ("submission", "0030_auto_20181209_2229"),
        ("submission", "0031_auto_20190223_0730"),
        ("submission", "0032_question_is_public"),
        ("submission", "0033_submission_slot_count"),
        ("submission", "0034_submission_internal_notes"),
        ("submission", "0035_reviewphase"),
        ("submission", "0036_auto_20190307_2323"),
        ("submission", "0037_auto_20190404_2246"),
        ("submission", "0038_auto_20190429_0750"),
        ("submission", "0039_submission_created"),
        ("submission", "0040_submission_created_data"),
        ("submission", "0041_auto_20191105_0042"),
        ("submission", "0042_question_is_visible_to_reviewers"),
        ("submission", "0043_auto_20200124_1213"),
        ("submission", "0044_submission_anonymised_data"),
        ("submission", "0045_extend_question_help_text_length"),
        ("submission", "0046_question_submission_types"),
        ("submission", "0047_track_description"),
        ("submission", "0048_reviewphase_can_see_reviewer_names"),
        ("submission", "0049_review_score_categories"),
        ("submission", "0050_migrate_review_scores"),
        ("submission", "0051_remove_review_override_vote"),
        ("submission", "0052_auto_20201010_1307"),
        ("submission", "0053_reviewphase_can_tag_submissions"),
        ("submission", "0054_reviewscorecategory_limit_tracks"),
        ("submission", "0055_unset_is_featured_flag"),
        ("submission", "0056_reviewscorecategory_is_independent"),
        ("submission", "0057_question_required_freeze"),
        ("submission", "0058_question_required_data"),
        ("submission", "0059_remove_question_required"),
        ("submission", "0060_alter_answeroption_answer"),
        ("submission", "0061_cfp_settings"),
        ("submission", "0062_cfp_settings_data"),
        ("submission", "0063_submission_pending_state"),
        ("submission", "0064_slot_count_min_value"),
        ("submission", "0065_alter_submission_slot_count"),
        ("submission", "0066_submission_assignments"),
        ("submission", "0067_question_extra_fields"),
        ("submission", "0068_alter_reviewscore_value"),
        ("submission", "0069_resource_links"),
        ("submission", "0070_review_uniqueness"),
        ("submission", "0071_alter_review_unique_together"),
        ("submission", "0072_alter_reviewscore_label"),
        ("submission", "0073_track_position"),
        ("submission", "0074_created_updated_everywhere"),
        ("submission", "0075_increase_resource_link_length"),
        ("submission", "0076_submissionfavourite"),
        ("submission", "0077_answeroption_position"),
    ]

    dependencies = [
        ("submission", "0001_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="submission",
            name="do_not_record",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="submission",
            name="code",
            field=models.CharField(max_length=16, unique=True),
        ),
        migrations.AlterField(
            model_name="submission",
            name="abstract",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="submission",
            name="description",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="cfp",
            name="deadline",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="cfp",
            name="default_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="submission.submissiontype",
            ),
        ),
        migrations.AlterField(
            model_name="cfp",
            name="headline",
            field=i18nfield.fields.I18nCharField(blank=True, max_length=300, null=True),
        ),
        migrations.AlterField(
            model_name="question",
            name="default_answer",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="question",
            name="position",
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="submission",
            name="duration",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="submission",
            name="state",
            field=models.CharField(default="submitted", max_length=9),
        ),
        migrations.AlterField(
            model_name="submissiontype",
            name="default_duration",
            field=models.PositiveIntegerField(default=30),
        ),
        migrations.AlterField(
            model_name="submissiontype",
            name="name",
            field=i18nfield.fields.I18nCharField(max_length=100),
        ),
        migrations.AddField(
            model_name="answer",
            name="person",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="answers",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="answer",
            name="submission",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="answers",
                to="submission.submission",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="target",
            field=models.CharField(default="submission", max_length=10),
        ),
        migrations.AddField(
            model_name="submission",
            name="invitation_token",
            field=models.CharField(
                default=pretalx.submission.models.submission.generate_invite_code,
                max_length=32,
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="active",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="answer",
            name="answer_file",
            field=models.FileField(
                blank=True,
                null=True,
                upload_to=pretalx.submission.models.question.answer_file_path,
            ),
        ),
        migrations.AlterField(
            model_name="question",
            name="variant",
            field=models.CharField(default="string", max_length=15),
        ),
        migrations.AddField(
            model_name="question",
            name="contains_personal_data",
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("text", models.TextField(blank=True, null=True)),
                (
                    "score",
                    models.DecimalField(decimal_places=2, max_digits=10, null=True),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="submission.submission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "override_vote",
                    models.BooleanField(blank=True, default=None, null=True),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="submissiontype",
            name="max_duration",
        ),
        migrations.AddField(
            model_name="submissiontype",
            name="deadline",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="submission",
            name="image",
            field=models.ImageField(
                blank=True,
                null=True,
                upload_to=pretalx.submission.models.submission.submission_image_path,
            ),
        ),
        migrations.AddField(
            model_name="answer",
            name="review",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="answers",
                to="submission.review",
            ),
        ),
        migrations.AddField(
            model_name="submission",
            name="is_featured",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="submission",
            name="review_code",
            field=models.CharField(
                blank=True,
                default=pretalx.submission.models.submission.generate_invite_code,
                max_length=32,
                null=True,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="submission",
            name="content_locale",
            field=models.CharField(default="en", max_length=32),
        ),
        migrations.AlterField(
            model_name="question",
            name="question",
            field=i18nfield.fields.I18nCharField(max_length=800),
        ),
        migrations.AlterField(
            model_name="cfp",
            name="text",
            field=i18nfield.fields.I18nTextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="submission",
            name="track",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="submissions",
                to="submission.track",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="tracks",
            field=models.ManyToManyField(
                blank=True, related_name="questions", to="submission.track"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="max_length",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="min_length",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="is_public",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="submission",
            name="slot_count",
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name="submission",
            name="internal_notes",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="track",
            name="color",
            field=models.CharField(
                max_length=7,
                validators=[
                    django.core.validators.RegexValidator("#([0-9A-Fa-f]{3}){1,2}")
                ],
            ),
        ),
        migrations.AddField(
            model_name="submission",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="submissiontype",
            name="requires_access_code",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="track",
            name="requires_access_code",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="SubmitterAccessCode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("code", models.CharField(db_index=True, max_length=255)),
                ("valid_until", models.DateTimeField(blank=True, null=True)),
                (
                    "maximum_uses",
                    models.PositiveIntegerField(blank=True, default=1, null=True),
                ),
                ("redeemed", models.PositiveIntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitter_access_codes",
                        to="event.event",
                    ),
                ),
                (
                    "submission_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitter_access_codes",
                        to="submission.submissiontype",
                    ),
                ),
                (
                    "track",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitter_access_codes",
                        to="submission.track",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                "unique_together": {("event", "code")},
            },
            bases=(
                pretalx.common.models.mixins.LogMixin,
                pretalx.common.models.mixins.GenerateCode,
                models.Model,
            ),
        ),
        migrations.AddField(
            model_name="submission",
            name="access_code",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="submissions",
                to="submission.submitteraccesscode",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="is_visible_to_reviewers",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="submission",
            name="anonymised_data",
            field=models.TextField(blank=True, default="{}", null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="help_text",
            field=i18nfield.fields.I18nCharField(blank=True, max_length=800, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="submission_types",
            field=models.ManyToManyField(
                blank=True, related_name="questions", to="submission.submissiontype"
            ),
        ),
        migrations.AddField(
            model_name="track",
            name="description",
            field=i18nfield.fields.I18nTextField(blank=True),
        ),
        migrations.CreateModel(
            name="ReviewScoreCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("name", i18nfield.fields.I18nCharField()),
                (
                    "weight",
                    models.DecimalField(decimal_places=1, default=1, max_digits=4),
                ),
                ("required", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score_categories",
                        to="event.event",
                    ),
                ),
                ("limit_tracks", models.ManyToManyField(to="submission.track")),
                ("is_independent", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ReviewScore",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("value", models.DecimalField(decimal_places=2, max_digits=7)),
                ("label", models.CharField(max_length=200, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scores",
                        to="submission.reviewscorecategory",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name="review",
            name="scores",
            field=models.ManyToManyField(
                related_name="reviews", to="submission.reviewscore"
            ),
        ),
        migrations.RemoveField(
            model_name="review",
            name="override_vote",
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("tag", models.CharField(max_length=50)),
                ("description", i18nfield.fields.I18nTextField()),
                ("color", models.CharField(max_length=7)),
                ("public", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="tags",
                        to="event.event",
                    ),
                ),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
            ],
            bases=(pretalx.common.models.mixins.LogMixin, models.Model),
        ),
        migrations.AddField(
            model_name="submission",
            name="tags",
            field=models.ManyToManyField(
                related_name="submissions", to="submission.tag"
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="deadline",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="freeze_after",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="question_required",
            field=models.CharField(default="optional", max_length=14),
        ),
        migrations.RemoveField(
            model_name="question",
            name="required",
        ),
        migrations.AlterField(
            model_name="answeroption",
            name="answer",
            field=i18nfield.fields.I18nCharField(),
        ),
        migrations.AddField(
            model_name="cfp",
            name="fields",
            field=models.JSONField(
                default=pretalx.submission.models.cfp.default_fields
            ),
        ),
        migrations.AddField(
            model_name="cfp",
            name="settings",
            field=models.JSONField(
                default=pretalx.submission.models.cfp.default_settings
            ),
        ),
        migrations.AddField(
            model_name="submission",
            name="pending_state",
            field=models.CharField(default=None, max_length=9, null=True),
        ),
        migrations.AddField(
            model_name="submission",
            name="assigned_reviewers",
            field=models.ManyToManyField(
                related_name="assigned_reviews", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="max_date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="max_datetime",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="max_number",
            field=models.DecimalField(decimal_places=6, max_digits=16, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="min_date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="min_datetime",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="min_number",
            field=models.DecimalField(decimal_places=6, max_digits=16, null=True),
        ),
        migrations.AlterUniqueTogether(
            name="review",
            unique_together={("user", "submission")},
        ),
        migrations.AddField(
            model_name="track",
            name="position",
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="answer",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="answer",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="answeroption",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="answeroption",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="cfp",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="cfp",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("rating", models.IntegerField(blank=True, null=True)),
                ("review", models.TextField()),
                (
                    "speaker",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "talk",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="feedback",
                        to="submission.submission",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
            ],
            bases=(pretalx.common.models.mixins.LogMixin, models.Model),
        ),
        migrations.AddField(
            model_name="question",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.CreateModel(
            name="ReviewPhase",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("start", models.DateTimeField(blank=True, null=True)),
                ("end", models.DateTimeField(blank=True, null=True)),
                ("position", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=False)),
                ("can_review", models.BooleanField(default=True)),
                (
                    "can_see_other_reviews",
                    models.CharField(default="after_review", max_length=12),
                ),
                ("can_see_speaker_names", models.BooleanField(default=True)),
                ("can_change_submission_state", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_phases",
                        to="event.event",
                    ),
                ),
                ("speakers_can_change_submissions", models.BooleanField(default=False)),
                ("can_see_reviewer_names", models.BooleanField(default=True)),
                (
                    "can_tag_submissions",
                    models.CharField(default="never", max_length=12),
                ),
                ("proposal_visibility", models.CharField(default="all", max_length=8)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                "ordering": ("position",),
            },
        ),
        migrations.AddField(
            model_name="submission",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="submissiontype",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="submissiontype",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="track",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="track",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AlterField(
            model_name="review",
            name="created",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AlterField(
            model_name="review",
            name="updated",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.CreateModel(
            name="Resource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                (
                    "resource",
                    models.FileField(
                        null=True,
                        upload_to=pretalx.submission.models.resource.resource_path,
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="resources",
                        to="submission.submission",
                    ),
                ),
                ("link", models.URLField(max_length=400, null=True)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
            ],
            bases=(pretalx.common.models.mixins.LogMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SubmissionFavourite",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favourites",
                        to="submission.submission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submission_favourites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("user", "submission")},
            },
            bases=(
                pretalx.common.models.mixins.LogMixin,
                pretalx.common.models.mixins.FileCleanupMixin,
                models.Model,
            ),
        ),
        migrations.AddField(
            model_name="answeroption",
            name="position",
            field=models.IntegerField(default=0),
        ),
    ]
