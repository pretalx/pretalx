# Generated by Django 5.2.3 on 2025-06-10 12:53

import django.db.models.deletion
import pretalx.common.models.mixins
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("submission", "0078_submissioncomment"),
        ("submission", "0079_rename_public_tag_is_public"),
        ("submission", "0080_speakerrole_alter_submission_speakers"),
        ("submission", "0081_alter_tag_unique_together"),
    ]

    dependencies = [
        ("submission", "0002_squashed_2025_2_0"),
    ]

    operations = [
        migrations.CreateModel(
            name="SubmissionComment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                ("text", models.TextField()),
                (
                    "reply_to",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="replies",
                        to="submission.submissioncomment",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="submission.submission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submission_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("created",),
            },
            bases=(
                pretalx.common.models.mixins.LogMixin,
                pretalx.common.models.mixins.FileCleanupMixin,
                models.Model,
            ),
        ),
        migrations.RenameField(
            model_name="tag",
            old_name="public",
            new_name="is_public",
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="ALTER TABLE submission_submission_speakers RENAME TO submission_speakerrole",
                    reverse_sql="ALTER TABLE submission_speakerrole RENAME TO submission_submission_speakers",
                ),
            ],
            state_operations=[
                migrations.CreateModel(
                    name="SpeakerRole",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True, primary_key=True, serialize=False
                            ),
                        ),
                        (
                            "submission",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="speaker_roles",
                                to="submission.submission",
                            ),
                        ),
                        (
                            "user",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="speaker_roles",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                    ],
                    options={
                        "unique_together": {("submission", "user")},
                    },
                ),
                migrations.AlterField(
                    model_name="submission",
                    name="speakers",
                    field=models.ManyToManyField(
                        related_name="submissions",
                        through="submission.SpeakerRole",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="tag",
            unique_together={("event", "tag")},
        ),
    ]
